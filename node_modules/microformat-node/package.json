{
  "author": {
    "name": "Glenn Jones"
  },
  "name": "microformat-node",
  "description": "A microformat parser for node.js",
  "version": "0.1.0",
  "license": "MPL, GPL or LGPL",
  "keywords": [
    "parser",
    "microfomats",
    "hCard",
    "hCalendar",
    "hReview",
    "hResume",
    "hAtom",
    "XFN"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/glennjones/microformat-node.git"
  },
  "main": "index",
  "dependencies": {
    "request": "2.10.x",
    "cheerio": "0.10.x",
    "underscore": "1.3.x",
    "underscore.Deferred": "0.1.x"
  },
  "scripts": {
    "start": "bin/microformat-node"
  },
  "readme": "# microformat-node\n\nmicroformat-node is a microformat parser for node.js. It is built using a well tested light-weight JavaScript parsing engine, which already powers a number of browser extensions. It currently supports the following formats: hCard, XFN, hReview, hCalendar, hAtom, hResume, geo, adr and tag.\n\n\nDemo API - http://microformat-node.jit.su/\n\n\n## Install\n\n    npm install microformat-node\n\nor\n\n    git clone http://github.com/glennjones/microformat-node.git\n    cd microformat-node\n    npm link\n\n\n#### Use\n\nwith URL\n\n    var microformats = require(\"microformat-node\");\n\n    microformats.parseUrl('http://glennjones.net/about', function(err, data){\n        // do something with data\n    });\n\n\nwith URL using a promise\n\n    var microformats = require(\"microformat-node\");\n\n    microformats.parseUrl('http://glennjones.net/about').then(function (err, data) {\n        // do something with data\n    });\n\n\nor with raw html\n\n    var microformats = require('microformat-node');\n\n    var html = '<p class=\"vcard\"><a class=\"fn url\" href=\"http://glennjones.net\">Glenn Jones</a></p>';\n    shiv.parseHtml(html, function(err, data){\n        // do something with data\n    });\n\n\nwith URL with an options object defining the formats to parse ie 'hCard';\n\n    var microformats = require(\"microformat-node\");\n\n    microformats.parseUrl('http://glennjones.net/about', {'format': 'hCard'}, function(err, data){\n        // do something with data\n    });\n\n\n#### Options  object for 'parseUrl' and 'parseHtml'\n\nThere are two properties for the parse methods the first is 'formats' which takes a comma delimit string of the microformats. The default setting for formats' is the full list of formats the parser can parse.\n\nThe 'useCache' causes the parser to cache the html across requests. The default cache saves in memory and limited to an hour and 1000 items.  \n\n\n#### Supported formats\n\nCurrently microformat-node supports the following formats: hCard, XFN, hReview, hCalendar, hAtom, hResume, geo, adr and tag. It's important to use the right case when specifying the formats query string parameter.\n\n\n#### Response \n\nThis will return JSON. This is an example of two geo microformats found in a page.\n\n    \n    {\n        \"microformats\": {\n            \"geo\": [{\n                \"latitude\": 37.77,\n                \"longitude\": -122.41\n            }, {\n                \"latitude\": 37.77,\n                \"longitude\": -122.41\n            }]\n        },\n        \"parser-information\": {\n            \"name\": \"Microformat Node\",\n            \"version\": \"0.3.0\",\n            \"page-title\": \"geo 1 - extracting singular and paired values test\",\n            \"time\": \"140ms\",\n            \"page-http-status\": 200,\n            \"page-url\": \"http://ufxtract.com/testsuite/geo/geo1.htm\"\n        }\n    }\n  \n\n#### Options for whole parser\n\n    var microformats = require(\"microformat-node\");\n    \n    microformats.setParserOptions({\n        logLevel: 3,\n        cacheTimeLimit: 3600000, \n        cacheItemLimit: 1000,\n        useCache: false,\n        formats: 'hCard,XFN,hReview,hCalendar,hAtom,hResume,geo,adr,tag',\n        cache: { object containing the cache interface },\n        logger: { object containing the logger interface }\n    });\n    \n* logLevel - (int 0-4) set the level at which the parser logs events\n* cacheTimeLimit - (int) the amount of time items are keep in the cache for before they are discarded. The time is set in milliseconds.\n* cacheItemLimit - (int) the number of items to keep in cache before some are discarded\n* useCache - (boolean) weather a parse should use the HTML cache. \n* formats - (string) a comma delimited list of formats to parse. \n* cache - (object) an object containing an interface described in the Custom cache section of the this document.\n* logger - (object) an object containing an interface described in the Custom logger section of the this document. \n\n\n#### Querying demo server\n\nStart the server binary:\n\n    $ bin/microformat-node\n\nThen visit the server URL\n\n    http://localhost:8888/\n\n\n#### Using the server API    \n\nYou need to provide the url of the web page and the format(s) you wish to parse as a single value or a comma delimited list:\n\n    GET http://localhost:8888/?url=http%3A%2F%2Fufxtract.com%2Ftestsuite%2Fhcard%2Fhcard1.htm&format=hCard\n\nYou can also use the hash # fragment element of a url to target only part of a HTML page. The hash is used to target the HTML element with the same id. \n\n\n#### Viewing the unit tests\n\nThe module inculdes a page which runs the ufxtract microfomats unit test suite. \n\n    http://localhost:8888/unittests/auto/\n\n\n## Custom cache\n\nmicroformats-node use an in-memory cache to store the HTML of web pages.\n\nThe options object contains a property called `cacheTimeLimit` that can be used to set the cache refresh time. By default, this is 3600000ms. The number of items stored in the cache can be limited using the options property `cacheItemLimit`. By default, the cache is limited to 1000 items. The 'useCache' property of options object is set to false by default.\n\nYou can replace the cache with your own, for example, to store the cached date in a database or file system. To add you own custom cache, all you need to do is provide an object containing the following interface:\n\n    {\n        function get (url) {\n            // add code to get data\n            returns data\n        }\n\n        function has(url) {\n            // add code to check your data store\n            returns true or false\n        }\n\n        function fetch (url, callback) {\n            // add code to return data\n            fires callback(null, data);\n        }\n\n        function set(url, data) {\n            // add code to store data\n            returns object\n        }\n    }\n\nand then add this interface as the `cache` property of the options object passed into the `parseUrl()` or `parseHtml()` methods.\n\n\n## Custom logger\n\nElsewhere use a simple logging system that writes to Node's console. You can replace the logger with your own, for example, to store warnings and errors in a database or log file. To add your own custom logger, all you need to do is provide an object contain the following interface:\n\n    {\n        function info (message) { /* code to pass on message */ }\n        function log  (message) { /* code to pass on message */ }\n        function warn (message) { /* code to pass on message */ }\n        function error(message) { /* code to pass on message */ }\n    }\n\nand then add this interface to the `logger` property of the options object passed into the `parseUrl()` or `parseHtml()` methods.\n\n\n\n## Support or Contact\n\nHaving trouble with microformat-node? Please raise an issue at: https://github.com/glennjones/microformat-node/issues\n\n\n## Authors and Contributors\n\nThis project uses a refactored/rebuilt version of the Mozilla Operator Extension which Mozilla open sourced under the Mozilla Public License. It is currently maintained by Glenn Jones, but I would like to thank the authors and contributors of the original source code from which this project is derived. Michael Kaply, Andy Mitchell, Elias Torres, Alex Faaborg, David I. Lehn and Keith Alexander.\n\n\n## License\n\nThe project is open sourced under MPL, GPL and LGPL licenses. See the [license.txt](https://raw.github.com/glennjones/microformat-node/master/license.txt \"license.txt\") file within the project source.\n",
  "_id": "microformat-node@0.1.0",
  "_from": "microformat-node@0.1.x"
}
